#!/usr/bin/env ts-node --dir ./
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const fs = __importStar(require("fs"));
const path_1 = __importDefault(require("path"));
const indextmpl_1 = require("../tmpl/aspect/indextmpl");
const aspect_deploy_1 = require("../tmpl/scripts/aspect-deploy");
const bind_1 = require("../tmpl/scripts/bind");
const readme_1 = require("../tmpl/readme");
const contract_deploy_1 = require("../tmpl/scripts/contract-deploy");
const contract_call_1 = require("../tmpl/scripts/contract-call");
const contract_send_1 = require("../tmpl/scripts/contract-send");
const create_account_1 = require("../tmpl/scripts/create-account");
const toolVersion = '^0.0.51';
const libVersion = '^0.0.30';
const web3Version = '^1.9.22';
class Init extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Init);
        this.ensureAssemblyDirectory(flags.dir);
        this.ensureProjectConfigJson(flags.dir);
        this.ensureTsconfigJson(flags.dir);
        this.ensureScriptDirectory(flags.dir);
        this.ensureContractDirectory(flags.dir);
        this.ensureTestsDirectory(flags.dir);
        this.ensureAsconfigJson(flags.dir);
        //package.json
        this.ensurePackageJson(flags.dir);
        //readme.md
        this.ensureReadme(flags.dir);
        this.log('=====Success=====');
    }
    ensureReadme(dir) {
        const readmePath = path_1.default.join(dir, 'README.md');
        if (!fs.existsSync(readmePath)) {
            fs.writeFileSync(readmePath, readme_1.ReadMeTmpl);
        }
    }
    ensureTestsDirectory(dir) {
        const projectDir = path_1.default.resolve(dir);
        const testDir = path_1.default.join(projectDir, 'tests');
        // this.log("- Making sure that the 'tests' directory exists...");
        if (fs.existsSync(testDir)) {
            this.log('  Exists: ' + testDir);
        }
        else {
            fs.mkdirSync(testDir);
            this.log('  Created: ' + testDir);
        }
    }
    ensureAsconfigJson(dir) {
        // this.log("- Making sure that 'asconfig.json' is set up...");
        const projectDir = path_1.default.resolve(dir);
        const asconfigFile = path_1.default.join(projectDir, 'asconfig.json');
        if (fs.existsSync(asconfigFile)) {
            this.log('  Exists: ' + asconfigFile);
        }
        else {
            fs.writeFileSync(asconfigFile, JSON.stringify({
                targets: {
                    debug: {
                        // -o build/debug.wasm -t build/debug.wat --sourceMap --debug
                        outFile: 'build/debug.wasm',
                        textFile: 'build/debug.wat',
                        sourceMap: true,
                        debug: true,
                    },
                    release: {
                        // -o build/release.wasm -t build/release.wat --sourceMap --optimize
                        outFile: 'build/release.wasm',
                        textFile: 'build/release.wat',
                        sourceMap: true,
                        optimizeLevel: 3,
                        shrinkLevel: 0,
                        converge: false,
                        noAssert: false,
                    },
                },
                options: {
                    bindings: 'esm',
                },
            }, null, 2));
            this.log('  Created: ' + asconfigFile);
        }
    }
    ensureProjectConfigJson(dir) {
        //  this.log("- Making sure that 'aspect.config.json' is set up...");
        const projectDir = path_1.default.resolve(dir);
        const projectConfig = path_1.default.join(projectDir, 'project.config.json');
        if (fs.existsSync(projectConfig)) {
            this.log('  Exists: ' + projectConfig);
        }
        else {
            fs.writeFileSync(projectConfig, JSON.stringify({
                node: 'https://testnet-rpc1.artela.network',
            }, null, 2));
            this.log('  Created: ' + projectConfig);
        }
    }
    ensureTsconfigJson(rootDir) {
        const tsconfigFile = path_1.default.join(rootDir, 'tsconfig.json');
        const tsconfigBase = 'assemblyscript/std/assembly.json';
        //  this.log("- Making sure that 'tsconfig.json' is set up...");
        if (fs.existsSync(tsconfigFile)) {
            const tsconfig = JSON.parse(fs.readFileSync(tsconfigFile, 'utf8'));
            tsconfig['extends'] = tsconfigBase;
            fs.writeFileSync(tsconfigFile, JSON.stringify(tsconfig, null, 2));
            this.log('  Updated: ' + tsconfigFile);
        }
        else {
            fs.writeFileSync(tsconfigFile, JSON.stringify({
                extends: tsconfigBase,
                include: ['./aspect/**/*.ts'],
            }, null, 2));
            this.log('  Created: ' + tsconfigFile);
        }
    }
    ensureContractDirectory(dir) {
        const projectDir = path_1.default.resolve(dir);
        const contractsDir = path_1.default.join(projectDir, 'contracts');
        // this.log("- Making sure that the 'contracts' directory exists...");
        if (fs.existsSync(contractsDir)) {
            this.log('  Exists: ' + contractsDir);
        }
        else {
            fs.mkdirSync(contractsDir);
            this.log('  Created: ' + contractsDir);
        }
    }
    ensureAssemblyDirectory(dir) {
        const projectDir = path_1.default.resolve(dir);
        const assemblyDir = path_1.default.join(projectDir, 'aspect');
        //  this.log("- Making sure that the 'assembly' directory exists...");
        if (fs.existsSync(assemblyDir)) {
            this.log('  Exists: ' + assemblyDir);
        }
        else {
            fs.mkdirSync(assemblyDir);
            this.log('  Created: ' + assemblyDir);
        }
        const aspectIndexPath = path_1.default.join(assemblyDir, 'index.ts');
        if (!fs.existsSync(aspectIndexPath)) {
            fs.writeFileSync(aspectIndexPath, indextmpl_1.WasmIndexTmpl);
        }
    }
    ensureScriptDirectory(dir) {
        const projectDir = path_1.default.resolve(dir);
        const scriptDir = path_1.default.join(projectDir, 'scripts');
        //  this.log("- Making sure that the 'scripts' directory exists...");
        if (fs.existsSync(scriptDir)) {
            this.log('  Exists: ' + scriptDir);
        }
        else {
            fs.mkdirSync(scriptDir);
            this.log('  Created: ' + scriptDir);
        }
        const aspectDeploy = path_1.default.join(scriptDir, 'aspect-deploy.cjs');
        if (!fs.existsSync(aspectDeploy)) {
            fs.writeFileSync(aspectDeploy, aspect_deploy_1.DeployTmpl);
        }
        const contractDeploy = path_1.default.join(scriptDir, 'contract-deploy.cjs');
        if (!fs.existsSync(contractDeploy)) {
            fs.writeFileSync(contractDeploy, contract_deploy_1.ContractDeployTmpl);
        }
        const bindPath = path_1.default.join(scriptDir, 'bind.cjs');
        if (!fs.existsSync(bindPath)) {
            fs.writeFileSync(bindPath, bind_1.BindTmpl);
        }
        const callPath = path_1.default.join(scriptDir, 'contract-call.cjs');
        if (!fs.existsSync(callPath)) {
            fs.writeFileSync(callPath, contract_call_1.ContractCallTmpl);
        }
        const contractSend = path_1.default.join(scriptDir, 'contract-send.cjs');
        if (!fs.existsSync(contractSend)) {
            fs.writeFileSync(contractSend, contract_send_1.ContractSendTmpl);
        }
        const createAccount = path_1.default.join(scriptDir, 'create-account.cjs');
        if (!fs.existsSync(createAccount)) {
            fs.writeFileSync(createAccount, create_account_1.CreateAccountTmpl);
        }
    }
    ensurePackageJson(dir) {
        const packageFile = path_1.default.join(dir, 'package.json');
        if (fs.existsSync(packageFile)) {
            const pkgFile = fs.readFileSync(packageFile, 'utf-8');
            const pkg = JSON.parse(pkgFile);
            const scripts = pkg.scripts || {};
            let updated = false;
            if (!pkg['type']) {
                pkg['type'] = 'module';
                updated = true;
            }
            pkg['exports'] || (pkg['exports'] = {
                '.': {
                    import: './build/release.js',
                    types: './build/release.d.ts',
                },
            });
            if (!scripts['aspect:build']) {
                scripts['asbuild:debug'] = 'asc aspect/index.ts --target debug';
                scripts['asbuild:release'] = 'asc aspect/index.ts --target release';
                scripts['aspect:build'] = 'npm run asbuild:debug && npm run asbuild:release';
                pkg['scripts'] = scripts;
                updated = true;
            }
            const npmDefaultTest = 'echo "Error: no test specified" && exit 1';
            if (!scripts['test'] || scripts['test'] == npmDefaultTest) {
                scripts['test'] = 'node tests';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['contract:bind']) {
                scripts['contract:bind'] = 'node scripts/bind.cjs';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['contract:deploy']) {
                scripts['contract:deploy'] = 'node scripts/contract-deploy.cjs';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['contract:call']) {
                scripts['contract:call'] = 'node scripts/contract-call.cjs';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['contract:send']) {
                scripts['contract:send'] = 'node scripts/contract-send.cjs';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['account:create']) {
                scripts['account:create'] = 'node scripts/create-account.cjs';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['aspect:deploy']) {
                scripts['aspect:deploy'] = 'npm run aspect:build && node scripts/aspect-deploy.cjs';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['contract:build']) {
                scripts['contract:build'] =
                    'solc -o ./build/contract/ --abi --storage-layout --bin ./contracts/*.sol  --overwrite';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['build']) {
                scripts['build'] = 'npm run contract:build && npm run aspect:build';
                pkg['scripts'] = scripts;
                updated = true;
            }
            if (!scripts['aspect:gen']) {
                scripts['aspect:gen'] = 'aspect-tool generate -i ./build/contract -o ./aspect';
                pkg['scripts'] = scripts;
                updated = true;
            }
            const devDependencies = pkg['devDependencies'] || {};
            if (!devDependencies['assemblyscript']) {
                devDependencies['assemblyscript'] = '^0.27.5';
                pkg['devDependencies'] = devDependencies;
                updated = true;
            }
            if (!devDependencies['as-proto-gen']) {
                devDependencies['as-proto-gen'] = '^1.3.0';
                pkg['devDependencies'] = devDependencies;
                updated = true;
            }
            if (!devDependencies['@artela/aspect-tool']) {
                devDependencies['@artela/aspect-tool'] = toolVersion;
                pkg['devDependencies'] = devDependencies;
                updated = true;
            }
            if (!devDependencies['yargs']) {
                devDependencies['yargs'] = '^17.7.2';
                pkg['devDependencies'] = devDependencies;
                updated = true;
            }
            const dependencies = pkg['dependencies'] || {};
            if (!dependencies['@artela/aspect-libs']) {
                dependencies['@artela/aspect-libs'] = libVersion;
                pkg['dependencies'] = dependencies;
                updated = true;
            }
            if (!dependencies['@artela/web3']) {
                dependencies['@artela/web3'] = web3Version;
                pkg['dependencies'] = dependencies;
                updated = true;
            }
            if (!dependencies['@assemblyscript/loader']) {
                dependencies['@assemblyscript/loader'] = '^0.27.5';
                pkg['dependencies'] = dependencies;
                updated = true;
            }
            if (!dependencies['as-proto']) {
                dependencies['as-proto'] = '^1.3.0';
                pkg['dependencies'] = dependencies;
                updated = true;
            }
            if (updated) {
                fs.writeFileSync(packageFile, JSON.stringify(pkg, null, 2));
                this.log('  Updated: ' + packageFile);
            }
            else {
                this.log('  Exists: ' + packageFile);
            }
        }
        else {
            fs.writeFileSync(packageFile, JSON.stringify({
                version: '1.0.0',
                main: 'index.js',
                scripts: {
                    'account:create': 'node scripts/create-account.cjs',
                    'contract:send': 'node scripts/contract-send.cjs',
                    'contract:call': 'node scripts/contract-call.cjs',
                    'aspect:deploy': 'npm run aspect:build && node scripts/aspect-deploy.cjs',
                    'aspect:build': 'npm run asbuild:debug && npm run asbuild:release',
                    'aspect:gen': 'aspect-tool generate -i ./build/contract -o ./aspect/contract',
                    'asbuild:debug': 'asc aspect/index.ts --target debug',
                    'asbuild:release': 'asc aspect/index.ts --target release',
                    'contract:bind': 'node scripts/bind.cjs',
                    'contract:deploy': 'node scripts/contract-deploy.cjs',
                    'contract:build': 'solc -o ./build/contract/ --via-ir --abi --storage-layout --bin ./contracts/*.sol --overwrite',
                    build: 'npm run contract:build && npm run aspect:gen && npm run aspect:build',
                },
                keywords: [],
                author: '',
                license: 'ISC',
                dependencies: {
                    '@artela/aspect-libs': libVersion,
                    '@artela/web3': web3Version,
                    '@assemblyscript/loader': '^0.27.5',
                    'as-proto': '^1.3.0',
                },
                devDependencies: {
                    '@artela/aspect-tool': toolVersion,
                    'as-proto-gen': '^1.3.0',
                    assemblyscript: '^0.27.5',
                    yargs: '^17.7.2',
                },
                type: 'module',
                exports: {
                    '.': {
                        import: './build/release.js',
                        types: './build/release.d.ts',
                    },
                },
            }, null, 2));
            this.log('  Created: ' + packageFile);
        }
    }
}
Init.description = 'init aspect project in a directory.';
Init.flags = {
    dir: core_1.Flags.string({
        char: 'd',
        default: process.cwd(),
    }),
};
exports.default = Init;
