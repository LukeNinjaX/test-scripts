"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const util = __importStar(require("../utils"));
const generator_1 = __importDefault(require("../generator"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
class Generate extends core_1.Command {
    toHyphenCase(str) {
        return (str
            // insert a hyphen between lower and upper case letters, or between letters and numbers
            .replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, '$1-$2')
            // convert above comment to english: replace all underscores with hyphens
            .replace(/_/g, '-')
            // convert above comment to english: convert to lowercase
            .toLowerCase()
            // remove leading hyphens (if any)
            .replace(/^-/, ''));
    }
    async run() {
        let sourceFilePath = '';
        let targetFilePath = '';
        //get sourceFilePath and targetFilePath
        const { flags } = await this.parse(Generate);
        if (flags.in == '') {
            this.log('Input your storage layout json file path like ` -i storage_layout.json`');
            process.exit(0);
        }
        else {
            sourceFilePath = path_1.default.resolve(flags.in);
        }
        if (flags.out == '') {
            this.log('Input your target generated ts file path like `-o xx.ts`');
            process.exit(0);
        }
        else {
            targetFilePath = path_1.default.resolve(flags.out);
        }
        if (util.isStringEmpty(sourceFilePath) || util.isStringEmpty(targetFilePath)) {
            this.log('Illegal input!');
            process.exit(0);
        }
        const inputAndOutputs = [];
        if (fs_1.default.statSync(sourceFilePath).isFile() &&
            (!fs_1.default.existsSync(targetFilePath) || fs_1.default.statSync(targetFilePath).isFile())) {
            if (!sourceFilePath.endsWith('.json') || !targetFilePath.endsWith('.ts')) {
                this.log('Illegal input!');
                process.exit(0);
            }
            else {
                inputAndOutputs.push([sourceFilePath, targetFilePath]);
            }
        }
        else if (fs_1.default.statSync(sourceFilePath).isDirectory() &&
            fs_1.default.statSync(targetFilePath).isDirectory()) {
            for (const file of fs_1.default.readdirSync(sourceFilePath)) {
                if (!file.endsWith('_storage.json')) {
                    continue;
                }
                const inputFile = path_1.default.join(sourceFilePath, file);
                const inputFileName = path_1.default.basename(inputFile, path_1.default.extname(inputFile));
                inputAndOutputs.push([
                    inputFile,
                    path_1.default.join(targetFilePath, this.toHyphenCase(inputFileName)) + '.ts',
                ]);
            }
        }
        else {
            this.log('Illegal input!');
            process.exit(0);
        }
        for (const inputAndOutput of inputAndOutputs) {
            const tracer = new generator_1.default(inputAndOutput[0], inputAndOutput[1]);
            tracer.generate();
        }
    }
}
Generate.description = 'Generate state tracing code for Aspect.';
Generate.flags = {
    in: core_1.Flags.string({
        char: 'i',
        default: '',
    }),
    out: core_1.Flags.string({
        char: 'o',
        default: '',
    }),
};
exports.default = Generate;
