export declare const DeployTmpl = "\n\"use strict\"\nconst Web3 = require(\"@artela/web3\");\nconst fs = require(\"fs\");\nconst argv = require('yargs')\n    .string('node')\n    .string('skfile')\n    .string('gas')\n    .string('wasm')\n    .argv;\n\nasync function deploy() {\n\n    const ARTELA_ADDR = \"0x0000000000000000000000000000000000A27E14\";\n\n    //---- web3 init---\n    const configJson = JSON.parse(fs.readFileSync('./project.config.json', \"utf-8\").toString());\n\n    // init connection to Artela node\n    let node = (argv.node) ? String(argv.node) : configJson.node;\n    if (!node) {\n        console.log(\"'node' cannot be empty, please set by the parameter or artela.config.json\")\n        process.exit(0)\n    }\n    const web3 = new Web3(node);\n    let gasPrice = await web3.eth.getGasPrice();\n\n\n    //--skfile ./build/privateKey.txt\n    let senderPriKey = String(argv.skfile)\n    if (!senderPriKey || senderPriKey === 'undefined') {\n        senderPriKey = \"privateKey.txt\"\n    }\n    if (!fs.existsSync(senderPriKey)) {\n        console.log(\"'account' cannot be empty, please set by the parameter ' --skfile ./build/privateKey.txt'\")\n        process.exit(0)\n    }\n    let pk = fs.readFileSync(senderPriKey, 'utf-8');\n    let sender = web3.eth.accounts.privateKeyToAccount(pk.trim());\n    console.log(\"from address: \", sender.address);\n    web3.eth.accounts.wallet.add(sender.privateKey);\n\n\n    //read wasm code\n    let aspectCode = \"\";\n    //  --wasm  ./build/release.wasm\n    let wasmPath = String(argv.wasm)\n    if (!wasmPath || wasmPath === 'undefined') {\n        aspectCode = fs.readFileSync('./build/release.wasm', {encoding: \"hex\"});\n    } else {\n        aspectCode = fs.readFileSync(wasmPath, {encoding: \"hex\"});\n    }\n    if (!aspectCode || aspectCode === \"\" || aspectCode === 'undefined') {\n        console.log(\"aspectCode cannot be empty\")\n        process.exit(0)\n    }\n\n\n    // to deploy aspect\n    let aspect = new web3.atl.Aspect();\n    let deploy = await aspect.deploy({\n        data: '0x' + aspectCode,\n        properties: [{'key': 'owner', 'value': sender.address}],\n        paymaster: sender.address,\n        proof: '0x0',\n    });\n\n    let tx = {\n        from: sender.address,\n        data: deploy.encodeABI(),\n        to: ARTELA_ADDR,\n        gasPrice,\n        gas: !parseInt(argv.gas) | 9000000\n    }\n    let signedTx = await web3.atl.accounts.signTransaction(tx, sender.privateKey);\n    console.log(\"sending signed transaction...\");\n    let ret = await web3.atl.sendSignedTransaction(signedTx.rawTransaction)\n        .on('receipt', receipt => {\n            console.log(receipt);\n        });\n    let aspectID = ret.aspectAddress;\n    console.log(\"ret: \", ret);\n    console.log(\"== deploy aspectID ==\", aspectID)\n}\n\ndeploy().then();\n";
