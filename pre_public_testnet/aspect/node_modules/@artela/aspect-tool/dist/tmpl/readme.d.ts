export declare const ReadMeTmpl = "\n\n# Sample Aspect\n\n## Instruction\n\nThis is a sample project of Artela Aspect. \n\n## Files\n\n```bash\n.\n\u251C\u2500\u2500 README.md\n\u251C\u2500\u2500 asconfig.json\n\u251C\u2500\u2500 assembly\n\u2502   \u251C\u2500\u2500 aspect                 <-- Your aspect code resides here\n\u2502   \u2502   \u2514\u2500\u2500 aspect.ts          <-- Entry functions for the aspect\n\u2502   \u2514\u2500\u2500 index.ts\n\u251C\u2500\u2500 contracts                  <-- Place your smart contracts here\n\u251C\u2500\u2500 scripts                    <-- Utilitity scripts, including deploying, binding and etc.\n\u2502   \u251C\u2500\u2500 aspect-deploy.cjs\n\u2502   \u251C\u2500\u2500 bind.cjs\n\u2502   \u251C\u2500\u2500 contract-call.cjs\n\u2502   \u2514\u2500\u2500 contract-deploy.cjs\n...\n```\n\n## Commands\n\n\n### 1.Create a account\n\n```solidity\n  npm run account:create  -- --skfile {file_path}\n```\n> * --skfile : privateKey path for sender. (optional,default value `./privateKey.txt`).\n\n\n### 2. Build contract\n\n```solidity\n   npm run contract:build\n```\n> The compiled product is placed in the `build/contract` directory.\n\n\n### 3. Deploy contract\n\n```bash\n  npm run contract:deploy -- --skfile {privateKey-path} \\                        \n                           --abi ./build/contract/xxx.abi \\                          \n                           --bytecode ./build/contract/xxx.bin \\     \n                           --args [..] \\                     \n                           --gas 200000 \n                           \n```\n> * --skfile : privateKey path for sender. (optional,default value `./privateKey.txt`).\n> * --abi : contract abi path.\n> * --bytecode:  contract bytecode path.\n> * --args : If your contract's constructor requires input parameters, use `--args '[1, \"a\"]'` (optional).\n> * --gas : e.g., `200000` (optional,default value `7000000`) \n\n\n### 4. Build Aspect\n\n```bash\n   npm run aspect:build\n```\n\n> The compiled product is placed in the `build` directory.\n\n\n### 5. Deploy Aspect\n\n```bash\n  npm run aspect:deploy -- --skfile {privateKey-path} \\                                                \n                         --wasm ./build/release.wasm \\\n                         --gas 200000  \n```\n> * --skfile : privateKey path for sender. (optional,default value `./privateKey.txt`).\n> * --wasm : wasm path.\n> * --gas : like `200000`,(optional,default value `7000000`).\n\n\n### 6. Contract Bind Aspect\n\n```bash\n  npm run contract:bind -- --skfile {privateKey-path} \\                          \n                         --contract {smart-contract-address} \\\n                         --abi ./build/contract/xxx.abi \\                        \n                         --aspectId {aspect-Id} \\                          \n                         --gas 200000 \n```\n> * --skfile : privateKey path for sender. (optional,default value `./privateKey.txt`).\n> * --abi : contract abi path.\n> * --contract:  smart contract address.\n> * --aspectId:  aspect id.\n> * --gas : like `200000`,(optional,default value `7000000`).\n\n\n### 7. Contract Call\n\n```shell\n  npm run contract:call -- --skfile {privateKey-path}    \\     \n                         --contract {smart-contract-address}  \\                         \n                         --abi ./build/contract/xxx.abi   \\                                    \n                         --method {method-name}  \\   \n                         --args [..]\n                         --gas 200000 \n```\n> * --skfile : privateKey path for sender. (optional,default value `./privateKey.txt`).\n> * --abi : contract abi path.\n> * --contract:  smart contract address.\n> * --method:  method name.\n> * --args : If your contract's constructor requires input parameters, use `--args '[1, \"a\"]'` (optional).\n> * --gas : like `200000`,(optional,default value `7000000`).\n\n\n### 8. Send Transaction\n\n```shell\n  npm run contract:send -- --skfile {privateKey-path}    \\     \n                         --contract {smart-contract-address}  \\                         \n                         --abi ./build/contract/xxx.abi   \\                                    \n                         --method {method-name}  \\   \n                         --args [..]\n                         --gas 200000 \n```\n> * --skfile : privateKey path for sender. (optional,default value `./privateKey.txt`).\n> * --abi : contract abi path.\n> * --contract:  smart contract address.\n> * --method:  method name.\n> * --args : If your contract's constructor requires input parameters, use `--args '[1, \"a\"]'` (optional).\n> * --gas : like `200000`,(optional,default value `7000000`).\n\n";
