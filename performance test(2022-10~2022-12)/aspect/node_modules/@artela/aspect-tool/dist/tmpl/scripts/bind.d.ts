export declare const BindTmpl = "\n\n\"use strict\"\nconst Web3 = require(\"@artela/web3\");\nconst fs = require(\"fs\");\nvar argv = require('yargs')\n    .string('node')\n    .string('pkfile')\n    .string('contract')\n    .string('aspectId')\n    .string('gas')\n    .string('abi')\n    .argv;\n\nasync function bind() {\n    // init connection to Artela node\n    const configJson = JSON.parse(fs.readFileSync('./project.config.json', \"utf-8\").toString());\n    const ASPECT_ADDR = \"0x0000000000000000000000000000000000A27E14\";\n\n    let node = (argv.node) ? String(argv.node) : configJson.node;\n    if (!node) {\n        console.log(\"'node' cannot be empty, please set by the parameter or project.config.json\")\n        process.exit(0)\n    }\n    const web3 = new Web3(node);\n    let gasPrice = await web3.eth.getGasPrice();\n\n\n    //--pkfile ./build/privateKey.txt\n    let senderPriKey = String(argv.pkfile)\n    if (!senderPriKey || senderPriKey === 'undefined') {\n        senderPriKey = \"privateKey.txt\"\n    }\n    if (!fs.existsSync(senderPriKey)) {\n        console.log(\"'account' cannot be empty, please set by the parameter ' --pkfile ./build/privateKey.txt'\")\n        process.exit(0)\n    }\n    let pk = fs.readFileSync(senderPriKey, 'utf-8');\n    let sender = web3.eth.accounts.privateKeyToAccount(pk.trim());\n    web3.eth.accounts.wallet.add(sender.privateKey);\n\n\n    // --contract {smart-contract-address}\n    let contractAddress = String(argv.contract)\n    if (!contractAddress || contractAddress === 'undefined') {\n        console.log(\"'contractAddress' cannot be empty, please set by the parameter ' --contract 0xxxx'\")\n        process.exit(0)\n    }\n\n    // --aspectId {aspect-Id}\n    let aspectId = String(argv.aspectId)\n    if (!aspectId || aspectId === 'undefined') {\n        console.log(\"'aspectId' cannot be empty, please set by the parameter' --aspectId 0xxxx'\")\n        process.exit(0)\n    }\n\n    // --abi xxx/xxx.abi\n    const abiPath = String(argv.abi)\n    let abi = null\n    if (abiPath && abiPath !== 'undefined') {\n        abi = JSON.parse(fs.readFileSync(abiPath, \"utf-8\").toString());\n    } else {\n        console.log(\"'abi' cannot be empty, please set by the parameter' --abi xxx/xxx.abi'\")\n        process.exit(0)\n    }\n\n    // do aspect bind\n    let storageInstance = new web3.eth.Contract(abi, contractAddress);\n    // bind the smart contract with aspect\n    let bind = await storageInstance.bind({\n        priority: 1,\n        aspectId: aspectId,\n        aspectVersion: 1,\n    })\n\n    let tx = {\n        from: sender.address,\n        data: bind.encodeABI(),\n        gasPrice,\n        to: ASPECT_ADDR,\n        gas: !parseInt(argv.gas) | 9000000\n    }\n\n    let signedTx = await web3.eth.accounts.signTransaction(tx, sender.privateKey);\n    console.log(\"sending signed transaction...\");\n    await web3.eth.sendSignedTransaction(signedTx.rawTransaction)\n        .on('receipt', receipt => {\n            console.log(receipt);\n        });\n    console.log(\"== aspect bind success ==\");\n\n}\n\nbind().then();\n";
