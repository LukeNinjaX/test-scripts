export declare const DeployTmpl = "\n\"use strict\"\nconst Web3 = require(\"@artela/web3\");\nconst fs = require(\"fs\");\nconst argv = require('yargs')\n    .string('node')\n    .string('sender')\n    .string('gasPrice')\n    .string('gas')\n    .string('wasm')\n    .argv;\n\nasync function f() {\n\n    const configJson = JSON.parse(fs.readFileSync('./project.config.json', \"utf-8\").toString());\n\n    // init connection to Artela node\n    let node = (argv.node)?String(argv.node):configJson.node;\n    if(!node){\n        console.log(\"'node' cannot be empty, please set by the parameter or artela.config.json\")\n        process.exit(0)\n    }\n    const web3 = new Web3(node);\n\n    //--sender 0x9999999999999999999999999999999999999999\n    let aspectDeployer =String(argv.sender)\n    if(!aspectDeployer || aspectDeployer==='undefined') {\n        console.log(\"'sender' cannot be empty, please set by the parameter ' --sender 0x9999999999999999999999999999999999999999'\")\n        process.exit(0)\n    }\n\n    // set nonce value\n    let nonceValAspectDeployer = await Web3.eth.getTransactionCount(aspectDeployer);\n\n    //\n    //read wasm code\n    let aspectCode=\"\";\n    //  --wasm  ./build/release.wasm\n    let wasmPath =String(argv.wasm)\n    if(!wasmPath || wasmPath==='undefined'){\n        aspectCode = fs.readFileSync('./build/release.wasm', {\n            encoding: \"hex\"\n        });\n    }else {\n        aspectCode = fs.readFileSync(wasmPath,\"utf-8\");\n    }\n    if(!aspectCode || aspectCode===\"\" ||aspectCode==='undefined'){\n        console.log(\"aspectCode cannot be empty\")\n        process.exit(0)\n    }\n\n    const contractOptions = {\n        from: aspectDeployer,\n        nonce: nonceValAspectDeployer,\n        gasPrice: argv.gasPrice || '1000000010',\n        gas: parseInt(argv.gas) || 4000000\n    };\n\n    // to deploy aspect\n    let aspect = new web3.atl.Aspect(\n        web3.utils.aspectCoreAddr, contractOptions);\n\n    let instance = aspect.deploy({\n        data: '0x' + aspectCode,\n        properties: [ { 'key': 'owner', 'value': aspectDeployer }]\n    }).send(contractOptions);\n\n    // print receipt\n    let aspectRt = await instance.on('receipt', (receipt) => {\n        console.log(\"=============== deployed aspect ===============\");\n        console.log(receipt);\n    }).on('transactionHash', (txHash) => {\n        console.log(\"deploy aspect tx hash: \", txHash);\n    });\n    // print aspect info\n    console.log(`--aspectAccount ${aspectDeployer}  --aspectId ${aspectRt.options.address}`);\n}\nf().then();\n";
