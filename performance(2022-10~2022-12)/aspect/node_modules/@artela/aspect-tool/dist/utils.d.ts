import { StorageItem } from './generator';
export declare function isStringEmpty(str: string): boolean;
export declare function getStrBetweenColon(str: string): string;
export declare function getStrAfterLastColon(input: string): string;
export declare function getStrBetLastCommaAndParen(input: string): string;
export declare function getMapSecondParam(input: string): string;
export declare function getMapFirstParam(input: string): string;
declare enum ASTTypeId {
    Number = 0,
    BytesN = 1,
    Address = 2,
    Boolean = 3,
    Array = 4,
    Mapping = 5,
    Tuple = 6,
    Bytes = 7,
    String = 8
}
export interface ASTType {
    typeId(): ASTTypeId;
    isComplexType(): boolean;
    asType(): string;
    classDef(prefix: string): string;
    generateClass(prefix: string, stateVarName: string): string;
    constructorFunc(stateVarName: string): string;
    getClassName(prefix: string): string;
    parseKeyFunc(): string;
}
declare abstract class BaseType implements ASTType {
    isComplexType(): boolean;
    asType(): string;
    abstract typeId(): ASTTypeId;
    abstract unmarshalStateFunc(): string;
    abstract parseKeyFunc(): string;
    getClassName(prefix: string): string;
    constructorFunc(stateVarName: string): string;
    classDef(prefix: string): string;
    generateClass(prefix: string, stateVarName: string): string;
}
declare abstract class BaseComplexType extends BaseType {
    unmarshalStateFunc(): string;
    abstract indexValue(): string;
    getClassName(prefix: string): string;
    classDef(prefix: string): string;
}
export declare class ASTNumber extends BaseType {
    private bits;
    private signed;
    constructor(bits: number, signed?: boolean);
    typeId(): ASTTypeId;
    asType(): string;
    unmarshalStateFunc(): string;
    parseKeyFunc(): string;
}
export declare class ASTBoolean extends BaseType {
    asType(): string;
    typeId(): ASTTypeId;
    unmarshalStateFunc(): string;
    parseKeyFunc(): string;
}
export declare class ASTAddress extends BaseType {
    asType(): string;
    typeId(): ASTTypeId;
    unmarshalStateFunc(): string;
    parseKeyFunc(): string;
}
export declare class ASTBytes extends BaseType {
    asType(): string;
    typeId(): ASTTypeId;
    unmarshalStateFunc(): string;
    parseKeyFunc(): string;
}
export declare class ASTBytesN extends ASTBytes {
    typeId(): ASTTypeId;
    asType(): string;
    parseKeyFunc(): string;
}
export declare class ASTString extends BaseType {
    asType(): string;
    typeId(): ASTTypeId;
    unmarshalStateFunc(): string;
    parseKeyFunc(): string;
}
export declare class ASTArray extends BaseComplexType {
    private elemType;
    constructor(elemType: ASTType);
    asType(): string;
    typeId(): ASTTypeId;
    accessOperator(childClass: string): string;
    parseKeyFunc(): string;
    indexValue(): string;
    indexAccess(childClass: string): string;
    generateClass(prefix: string, stateVarName: string): string;
}
export declare class ASTMapping extends BaseComplexType {
    private keyType;
    private valueType;
    constructor(keyType: ASTType, valueType: ASTType);
    asType(): string;
    typeId(): ASTTypeId;
    accessOperator(childClass: string): string;
    indexAccess(childClass: string): string;
    indexValue(): string;
    parseKeyFunc(): string;
    generateClass(prefix: string, stateVarName: string): string;
}
export declare class ASTStruct extends BaseComplexType {
    private members;
    constructor(members: [string, ASTType][]);
    asType(): string;
    typeId(): ASTTypeId;
    generateProperties(propertyClasses: string[]): string;
    structConstructor(stateVarName: string, properties: [string, string][]): string;
    classDef(prefix: string): string;
    indexValue(): string;
    generateClass(prefix: string, stateVarName: string): string;
    parseKeyFunc(): string;
}
export declare function getParamPrefix(item: StorageItem): string;
export {};
